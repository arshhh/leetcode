class Solution {
public:
    bool distance(string s,string ss){
        int size = s.size();
        int diff = 0;
        for(int i=0;i<size;i++){
            if(s[i]!=ss[i])
                diff++;
            if(diff>1)
                return false;
        }
        if(diff == 1)
            return true;
        return false;  
    }
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        int length = 2;
            int size = dict.size();
	 string* stack1 = new string[size];
	string* stack2   = new string[size];
	int size1=0;
	int size2=0;
	stack1[0] = start;
	size1++;
	while(size1>0){
	for(int j=0;j<size1;j++){
		string s = stack1[j];
		if(distance(s,end))
			return length;
	}
    if(dict.empty())
        return 0;
	length++;
	size2 = 0;
	for(int j=0;j<size1;j++){
		string s=stack1[j];
		for(unordered_set<string>::iterator iter = dict.begin();iter != dict.end();){
			    string ss = *iter;
                if(distance(ss,s)){
			    	stack2[size2] = ss;
			    	size2++;
			    	dict.erase(iter++);
                }
                else{
                    iter++;
                }
		}
	}
	stack1 = stack2;
	size1 = size2;
	stack2 = stack1;
	}
	return 0;
    }
};
