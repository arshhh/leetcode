class Solution {
public:
    bool distance(string s,string ss){
        int size = s.size();
        int diff = 0;
        for(int i=0;i<size;i++){
            if(s[i]!=ss[i])
                diff++;
            if(diff>1)
                return false;
        }
        if(diff == 1)
            return true;
        return false;  
    }
    
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int length = 2;
        queue<string> layer;
    	layer.push(start);
	    int layer1_size = 1;
	    int layer2_size = 0;
	    while(!layer.empty()){
	      // Compare the words in stack1 with the end. 
	      while(layer1_size > 0) {
		    string s = layer.front();
	    	if(distance(s,end))
	           return length;
	        layer1_size--;
	        layer.pop();
	        // Find the words in dict that has 1 distance with s.
	        for(unordered_set<string>::iterator iter = dict.begin();iter != dict.end();){
	 	        string ss = *iter;
		        if(distance(ss,s)){
		            layer2_size++;
		            layer.push(ss);
    				dict.erase(iter++);
		        }
	        	else{
	        	    iter++;
	        	}
	         }
	       }
	       length++;
	       layer1_size = layer2_size;
	       layer2_size = 0;
		}
    	return 0;
    }
};
