class Solution {
public:
    bool equal(vector<int> v1,vector<int> v2){
        int n=v1.size();
        for(int i=0;i<n;i++){
            if(v1[i]!=v2[i])
                return false;
            
        }
        return true;
        
    }
   void removeDuplicates(vector<vector<int> > &res){
       int n=res.size();
       if(n==0)
            return;
        for(int i=0;i<res.size()-1;){
            if(equal(res[i],res[i+1])){
                res.erase(res.begin()+i);
            }
            else{
                i++;
            }
        }
   }
//return the combinations of count items whose sum equals to sum and are located //between 0  to end
   vector<vector<int> > getSum(vector<int> &num,int end,int count,int sum){
    vector<vector<int> > res;
	if(count==0 || count>end+1)
		return res;
	if(count==1){
		for(int i=0;i<=end;i++)
			if(num[i]==sum){
				vector<int> v;
				v.push_back(num[i]);
				res.push_back(v);
				return res;
			}
		return res;
	}
    int min=num[0];
	int max=num[end];
	for(int i=1;i<end;i++){
		if(num[i]<0)
			min+=num[i];
		else if(num[i]>0)
			max+=num[i];
	}
	if(sum>max || sum<min)
		return res;
	for(int i=end;i>-1;i--){
        if(i!=end && num[i]==num[i+1])
            continue;
		vector<vector<int> > tmp=getSum(num,i-1,count-1,sum-num[i]);
		if(tmp.size()>0){
			for(int j=0;j<tmp.size();j++){
				vector<int> v=tmp[j];
				v.push_back(num[i]);
				res.push_back(v);
            }
		}
	}
    //remove the duplicates
   // removeDuplicates(res);
	return res;
}
    vector<vector<int> > threeSum(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n=num.size();
	vector<vector<int> > res;
	if(n<3)
		return res;
	sort(num.begin(),num.end());
	return getSum(num,n-1,3,0);
		
    }
};

