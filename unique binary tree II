/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //gengerate binary search trees with n numbers, and the first number is n
    vector<TreeNode *> generateTrees(int n,int base){
        vector<TreeNode*> result;
        if(n==0){
            result.push_back(NULL);
        }
        //different roots
        for(int i=0;i<n;i++){
            vector<TreeNode*> leftSet=generateTrees(i,base);
            vector<TreeNode*> rightSet=generateTrees(n-i-1,base+i+1);
            for(int j=0;j<leftSet.size();j++){
                TreeNode* left=leftSet[j];
                for(int k=0;k<rightSet.size();k++){
                    TreeNode* right=rightSet[k];
                    TreeNode* root=new TreeNode(i+base);
                    root->left=left;
                    root->right=right;
                    result.push_back(root);
                }
            }
            
        }//for
        return result;
    }

    vector<TreeNode *> generateTrees(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return generateTrees(n,1);
    }
};
