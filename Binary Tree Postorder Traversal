/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root==nullptr)
            return res;
        stack<TreeNode*> s;
        s.push(root);
        TreeNode* pre_visited = nullptr;
        while(!s.empty()) {
            TreeNode* curr = s.top();
            cout << curr->val;
            // both Left and Right tree has been visited. Empty subtree are considered as visited.
            if((curr->right && pre_visited == curr->right) || (!curr->right && curr->left && pre_visited == curr->left) || (!curr->right && !curr->left)) {
                res.push_back(curr->val);
                s.pop();
                pre_visited = curr;
                continue;
            }
            // Visit right tree.
            if (!curr->left || curr->left == pre_visited) {
                s.push(curr->right);
                continue;
            }
            // Visit left tree
            s.push(curr->left);
        }
        return res;
    }
};
