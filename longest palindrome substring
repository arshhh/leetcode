class Solution {
public:


    string longestPalindrome(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = s.size();
         int m=2*n+1;
        string t(m,'#');
        for(int i=0;i<n;i++){
            t[2*i+1]=s[i];
        }
       
        int p[m];
        int c=0;
        int r=0;
        string res;
        int center=0;
        int len=0;
        for(int i=1;i<m;i++){
            int ii=2*c-i;
            p[i] = i>=r ? 0 : min(r-i,p[ii]);
            //very smart process method, because we try to add one to p[i]
            while(t[i+p[i]+1]==t[i-p[i]-1])
                p[i]++;
            if(i+p[i]>r){
                c=i;
                r=i+p[i];
            }
            if(p[i]>len){
                center=i;
                len=p[i];
            }
        }
  
        return s.substr((center-len+1)/2,len);
    }
};

