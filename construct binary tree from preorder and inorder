/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode * buildTree(vector<int> &preorder,int sp,int ep,vector<int> &inorder,int si,int ei){
        if(ep<sp)
            return NULL;
        int val=preorder[sp];
        for(int i=si;i<=ei;i++){
            if(inorder[i]==val){
                TreeNode* root=new TreeNode(val);
                root->left=buildTree(preorder,sp+1,sp+i-si,inorder,si,i-1);
                root->right=buildTree(preorder,sp+i-si+1,ep,inorder,i+1,ei);
                return root;
            }
        }
        
    }
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return buildTree(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);  
    }
};




