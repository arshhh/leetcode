/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
     vector<vector<int> > result;
        if(root==NULL)
    return result;
	//its children will be visited from right to left
  	stack<TreeNode*> right_to_left;
	//its children will be visited from left to right
	stack<TreeNode*> left_to_right;
	vector<int> level;
	
	right_to_left.push(root);
	while(!right_to_left.empty() || !left_to_right.empty()){
		level.clear();
		if(!right_to_left.empty()){
			while(!right_to_left.empty()){
				TreeNode* node=right_to_left.top();
				level.push_back(node->val);
		
				if(node->left){
					left_to_right.push(node->left);
				}
			      if(node->right){
					left_to_right.push(node->right);
				}
				right_to_left.pop();
			}
		}else{
			while(!left_to_right.empty()){
				TreeNode* node=left_to_right.top();
				level.push_back(node->val);
                if(node->right)
					right_to_left.push(node->right);
                if(node->left)
				right_to_left.push(node->left);

				left_to_right.pop();
			}

		}//else
		result.push_back(level);
	}
	return result;
    }
};

