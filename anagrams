class Solution {
public:

    string sort(string a){
         int count[26]={0};
         int n=a.size();
        string res="";
        for(int i=0;i<n;i++){
            int num1=a[i]-'a';
            count[num1]++;
        }
        for(int i=0;i<26;i++){
            if(count[i]!=0){
                string tmp(count[i],'a'+i);
                res += tmp;
            }
        }
        return res;
    }
    vector<string> anagrams(vector<string> &strs) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n=strs.size();
        bool found=false;
        bool* matched=new bool[n]();
        vector<string> res;
        unordered_map<string,int> map;
        for(int i=0;i<n;i++){
            string new_str = sort(strs[i]);
            unordered_map<string,int>::iterator iter = map.find(new_str);
            if(iter!=map.end()){
                res.push_back(strs[i]);
                if(iter->second!=-1){
                    res.push_back(strs[iter->second]);
                    iter->second =-1;
                }
            }else{
                map[new_str]=i;
            }
        
        
        }
        return res;
    }
};








