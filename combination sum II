class Solution {
public:
    //combinations from start to end and equals to target
	void combinations(vector<int> &num,int start,int end,int target,vector<int>& set,vector<vector<int>>& result){
		if(target < 0 )
			return ;
		if(target==0){
		    result.push_back(set);
		    return;
		}
        //combinations that doesn't end with num[end]
        for(int i=start;i<=end;i++){
            if(i==start || num[i]!=num[i-1]){
                set.push_back(num[i]);
                combinations(num,i+1,end,target-num[i],set,result);
                set.pop_back();
            }
        }
	}
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
	int n=num.size();
	vector<vector<int> > result;
	if(n==0)
		return result;
    sort(num.begin(),num.end());
    vector<int> set;
    
    combinations(num,0,n-1,target,set,result);
	
	return result;
	
    }
};
