class Solution {
public:
    //combinations from start to end and equals to target
	vector<vector<int> > combinations(vector<int> &num,int start,int end,int target){
		vector<vector<int> > result;
		if(target < 0 )
			return result;
	
        if(end<start && target !=0)
            return result;
		if(target==0){
			vector<int> empty;
			result.push_back(empty);
			return result;
		}
        //combinations that doesn't end with num[end]
        for(int i=end;i>=start-1;i--){
            if(i>-1 && i+1<=end && num[i]==num[i+1])
                continue;       
            vector<vector<int> > tmp=combinations(num,0,i-1,target-num[i]);   
             if(!tmp.empty()){
    		        for(int j=0;j<tmp.size();j++){
			        	vector<int> old_set=tmp[j];
			        	old_set.push_back(num[i]);
			        	result.push_back(old_set);
			}
		}
	}       
        
		return result;
	}
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        sort(num.begin(),num.end());
	int n=num.size();
	
	vector<vector<int> > result;
	if(n==0)
		return result;

    
	return  combinations(num,0,n-1,target);
	
    }
};

