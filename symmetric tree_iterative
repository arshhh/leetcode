/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(root==NULL)
		 return true;
	if(root->left==NULL && root->right==NULL)
		return true;
	if(root->left!=NULL && root->right!=NULL){
		queue<TreeNode*> node_queue;
		node_queue.push(root->left);
		node_queue.push(root->right);
		while(node_queue.size()>0){
			TreeNode* left = node_queue.front();
			node_queue.pop();
			TreeNode* right=node_queue.front();
			node_queue.pop();
			
			if(left->val!=right->val)
				return false;
			if(left->left!=NULL && right->right!=NULL){
				node_queue.push(left->left);
				node_queue.push(right->right);
			}else if(left->left==NULL && right->right==NULL)
				;
			else
				return false;
			if(left->right!=NULL && right->left!=NULL){
				node_queue.push(right->left);
				node_queue.push(left->right);
			}else if(left->right==NULL && right->left==NULL)
				;
			else
				return false;
		}//while
		return true;
	}else{
		return false;
	}	
    }
};

