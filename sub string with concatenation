class Solution {
public:
    vector<int> findSubstring(string S, vector<string> &L) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        vector<int> result;
        int m=S.size();
        int n=L.size();
        if(m==0 || n==0)
            return result;
        int len=L[0].size();
        unordered_map<string,int> need;
        int nn=0; //the number of words without duplicates
        for(int i=0;i<n;i++){
            if(!need.count(L[i])){
                need[L[i]]=1;
                nn++;
            }
            else
                need[L[i]]++;
        }
       
        unordered_map<string,int> backup(need);
        for(int offset=0;offset<len;offset++){
            int begin=offset;
            //the need needs to be re-back
            need=backup;
            int count=0;
            for(int i=offset;i+len-1<m;i+=len){
                string word=S.substr(i,len);
                unordered_map<string,int>::iterator iter=need.find(word);
                if(iter!=need.end()){
                    iter->second--;
                    if(iter->second==0)
                        count++;
                }
                //check if 
                if(count==nn){
                    result.push_back(i-(n-1)*len);
                }
                //move the window
                if(i-begin+len==n*len){
                    string word=S.substr(begin,len);
                    unordered_map<string,int>::iterator iter=need.find(word);
                    if(iter!=need.end()){
                        iter->second++;
                        if(iter->second==1)
                            count--;
                    }
                    begin += len;
                }
            }
        }
        return result;
    }
};
