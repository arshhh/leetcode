/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void swap(TreeNode* node1,TreeNode* node2){
	int val=node1->val;
	node1->val = node2->val;
	node2->val=val;
}

void  getList(TreeNode* root,vector<TreeNode*>& list){
	if(root==NULL)
		return;
	if(root->left!=NULL)
		getList(root->left,list);
	list.push_back(root);
	if(root->right!=NULL)
		getList(root->right,list);
}
    void recoverTree(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<TreeNode*> list;
	getList(root,list);
	TreeNode* array[4];
	int count=0;
	for(int i=0;i<list.size()-1;i++){
		if(list[i]->val > list[i+1]->val){
			array[count*2]=list[i];
			array[count*2+1]=list[i+1];
			count++;
		}
	}
	if(count==1)
		swap(array[0],array[1]);
	else
		swap(array[0],array[3]);
		
    }
};

