class Solution {
public:
    bool isValid(vector<vector<char> > &board,int i,int j, char c){
		// rows, cols
		for(int k=0;k<9;k++){
			if(board[i][k] == c)
                return false;
			if(board[k][j] == c)
				return false;
		}
		
		int ii=i/3*3;
		int jj=j/3*3;
		
		for(int k=0;k<3;k++){
			for(int l=0;l<3;l++){
				if(board[ii+k][jj+l] == c){
                    return false;
				}
			}
		}
		return true;
	}
	
    bool solve(vector<vector<char>> &board,int i, int j){
        if(board[i][j]!='.' ){
            if(i==8 && j==8)
                return true;
            if(j==8){
                i++;
                j=0;
            } else {
                j++;
            }
            return solve(board, i, j);
        }
        for(int l=0;l<9;l++){
            if(isValid(board, i, j, '1'+l)) {
                board[i][j]='1' + l;
                if(solve(board, i, j))
                    return true;
                 board[i][j]='.';
            }
        }
        return false;
    }	
    void solveSudoku(vector<vector<char> > &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    	solve(board, 0, 0);
    }
};
