/*

I find the optimal position every time.BUt I don't know if it's faster!



*/



class Solution {
public:
    vector<char> getChoices(vector<vector<char> > &board,int i,int j){
        int n=9;
        vector<char> result;
        bool* table = new bool[9];
		for(int k=0;k<n;k++)
			table[k]=true;
		for(int k=0;k<n;k++){
			if(board[i][k]!='.')
				table[board[i][k]-'1']=false;
			if(board[k][j]!='.')
				table[board[k][j]-'1']=false;
		}
		int ii=i/3*3;
		int jj=j/3*3;
		for(int k=0;k<3;k++)
			for(int l=0;l<3;l++){
				if(board[ii+k][jj+l]!='.'){
					table[board[ii+k][jj+l]-'1']=false;
				}
			}
		for(int k=0;k<n;k++){
			if(table[k])
				result.push_back('1'+k);
		}
		return result;
	}
	
bool solve(vector<vector<char> > &board,int k){
    if(k==81)
        return true;
    int i=k/9;
    int j=k%9;
 
    if(board[i][j]!='.'){
        return solve(board,k+1);
    }
    
    vector<char> choices=getChoices(board,i,j);
    for(int l=0;l<choices.size();l++){
        board[i][j]=choices[l];
        if(solve(board,k+1))
            return true;
        board[i][j]='.';
    }
    return false;
}	
    void solveSudoku(vector<vector<char> > &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    	solve(board,0);
    }
};



