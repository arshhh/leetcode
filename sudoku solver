/*

I find the optimal position every time.BUt I don't know if it's faster!



*/



class Solution {
public:
    vector<char> getChoices(vector<vector<char> > &board,int i,int j,int n){
        vector<char> result;
        		bool* table = new bool[n];
		for(int k=0;k<n;k++)
			table[k]=true;
		for(int k=0;k<n;k++){
			if(board[i][k]!='.')
				table[board[i][k]-'1']=false;
			if(board[k][j]!='.')
				table[board[k][j]-'1']=false;
		}
		int ii=i/3*3;
		int jj=j/3*3;
		for(int k=0;k<3;k++)
			for(int l=0;l<3;l++){
				if(board[ii+k][jj+l]!='.'){
					table[board[ii+k][jj+l]-'1']=false;
				}
			}
		for(int k=0;k<n;k++){
			if(table[k])
				result.push_back('1'+k);
		}
		return result;
	}
    
    vector<char> getOptimalPos(vector<vector<char> > &board,int &row,int &col,int n){
        int min = n+1;
        vector<char> choices;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j] == '.'){
                    vector<char> tmp = getChoices(board,i,j,n);
                    if(tmp.size() == 0){
                        row=-1;
                        col=-1;
                        return choices;
                    }
                        
                    if(tmp.size()<min){
                        min = tmp.size();
                        choices = tmp;
                        row=i;
                        col=j;
                    }
                }
                
            }
            
        }
        return choices;      
    }
bool solve(vector<vector<char> > &board,int k){
    if(k==81)
        return;
    int i=k/9;
    int j=k%9;
    while(true){
        if(board[i][j]!='.')
            solve(board,k+1);
        else
            break;
    }
    vector<char>
   
}	
    void solveSudoku(vector<vector<char> > &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    	solve(board,0);
    }
};



