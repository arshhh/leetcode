class Solution {
public:
    int minCut(string s) {
        vector<vector<int>> vec(s.length() , vector<int>());
        for (int i = 0 ; i < s.length() ; i ++) {
            //center is one character
            for (int j = 0 ; i - j >= 0 && i + j < s.length() && s[i-j] == s[i+j]; j ++) {
                vec[i+j].push_back(i-j);
            }
            //center is two characters
            for (int j = 0 ; i - j >= 0 && i + j + 1 < s.length() && s[i-j] == s[i+j+1]; j ++) {
                vec[i+j+1].push_back(i-j);
            }
        }
        //vec[i] stores the palindrome index before i 
        vector<int> dp(s.length() , INT_MAX);
        dp[0] = 0;
        for (int i = 1 ; i < s.length() ; i ++) {
            for (int j = 0 ; j < vec[i].size() ; j ++) {
                if(vec[i][j]==0){
                    dp[i]=0;
                    break;
                }
                else
                     dp[i] = min(dp[vec[i][j]-1]+1, dp[i]);
            }
        }
        return dp[s.length()-1];
    }
}; 
