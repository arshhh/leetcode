/* this version is awesome and the code is concide */

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    vector<int> res;
        if(root==NULL)
	return res;
	stack<TreeNode*> node_stack;
	node_stack.push(root);
	//using NULL to indicate the end of traversal of right subtree and left substree
	while(!node_stack.empty()){
		TreeNode* node=node_stack.top();
		//end of traversal of right subtree
		if(node==NULL){
			node_stack.pop();
			if(node_stack.empty())
				break;
			node = node_stack.top();
			res.push_back(node->val);
			node_stack.pop();
			node_stack.push(node->right);
		}else{
			node_stack.push(node->left);
		}
	}
	return res;
    }
};

