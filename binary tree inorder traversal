/* this version is awesome and the code is concide */

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    vector<int> res;
        if(root==NULL)
	return res;
	stack<TreeNode*> node_stack;
	TreeNode* current=root;
	//using NULL to indicate the end of traversal of right subtree and left substree
	while(!node_stack.empty() || current){
		if(current!=NULL){
			node_stack.push(current);
			current=current->left;
		}else{
			//node_stack should not be empty
			TreeNode* top=node_stack.top();
			node_stack.pop();
			res.push_back(top->val);
			current=top->right;
		}
	}
	return res;
    }
};

