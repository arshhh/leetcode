double epsilon=0.000000001;

struct cmp_map{
  bool operator()(const double& l1,const double& l2) const{
        return l2-l1>epsilon;
  }  
};

bool equal(const Point& p1,const Point& p2){
    if(p1.x==p2.x && p1.y==p2.y)
        return true;
    return false;
}
class Solution {
public:
    int maxPoints(vector<Point> &points) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(points.size()<=1)
            return points.size();
        int ret=0;
        for(int i=0;i<points.size()-1;i++){
            map<double,int,cmp_map> slope_map;
            Point left=points[i];
            int base=1;
            int vertical=0;
            for(int j=i+1;j<points.size();j++){
                if(equal(points[j],left))
                    base++;
                else{
                    if(points[j].x!=left.x){
                        double slope=(double)(points[j].y-left.y)/(points[j].x-left.x);
                        slope_map[slope]++;
                    }else{
                       vertical++; 
                    }
                }
            }
           // ret=max(ret,base); //when all the points are the same
            ret=max(ret,base+vertical); //the same points or vertical points
            map<double,int,cmp_map>::iterator iter;
            for(iter=slope_map.begin();iter!=slope_map.end();iter++)
                 ret=max(ret,base+iter->second);
        }
        return ret;
    }
};
