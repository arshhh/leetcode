/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int find(vector<int>& v,int val){
		for(int i=0;i<v.size();i++)
			if(v[i]==val)
				return i;
		return -1;
	}
	
	void partition(vector<int>& old,int p,vector<int>& left,vector<int>& right){
		int size = old.size();
		for(int i=0;i<p;i++){
			left.push_back(old[i]);
		}
		for(int i=p+1;i<size;i++){
			right.push_back(old[i]);
		}
	}
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
	 int size = inorder.size();
	 if( size == 0)
	    return NULL;	
	//has left and right
	TreeNode* root = new TreeNode(postorder[size-1]);
	int rootIndex = find(inorder,postorder[size-1]);

	vector<int> leftInorder,rightInorder,leftPostorder,rightPostorder;
	partition(inorder,rootIndex,leftInorder,rightInorder);
	//leftMostIndex of the right tree of root in order
	int leftSize = leftInorder.size();
	for(int i=0;i<leftSize;i++)
		 leftPostorder.push_back(postorder[i]);
	for(int i=leftSize;i<size-1;i++)
    		rightPostorder.push_back(postorder[i]);
    	//avoid memory limitation
	 vector<int>().swap(inorder);
    	vector<int>().swap(postorder);
	root->left =  buildTree(leftInorder,leftPostorder);
	root->right = buildTree(rightInorder,rightPostorder);
	return root;
    }
};

