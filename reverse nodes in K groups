/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode* pre,int k){
        ListNode* head=pre->next;
        while(--k){
            ListNode* item=head->next;
            head->next=head->next->next;
            item->next=pre->next;
            pre->next=item;
        }
        return head;
    }
    ListNode *reverseKGroup(ListNode *head, int k) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        ListNode* dummy=new ListNode(-1);
        dummy->next=head;
        ListNode* pre=dummy;
        ListNode* curr=head;
        int i=0;
        while(head){
            i++;
            if(i%k==0){
                pre=reverse(pre,k);
                head=pre->next;
            }else{
                head=head->next;
            }
        }
        head=dummy->next;
        delete dummy;
        return head;
    }
};
