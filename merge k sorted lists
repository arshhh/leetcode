/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2){
		ListNode* head=new ListNode(-1);
		ListNode* p=head;
		while(l1 && l2){
			if(l1->val<=l2->val){
				p->next=l1;
				l1=l1->next;
			}
			else{
				p->next=l2;
				l2=l2->next;
			}
			p=p->next;
		}
		if(l1==NULL) 
			p->next=l2;
		if(l2==NULL)
			p->next=l1;
		return head->next;
	}
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        //merge two lists each time
	int n=lists.size();
	if(n==0)
		return NULL;
while(lists.size()>1){
	int old_size=lists.size();
	int j=0;
	for(int i=0;i<old_size-1;i+=2){
		lists[j]=mergeTwoLists(lists[i],lists[i+1]);
		j++;
	}
if(old_size%2!=0)
		lists[j]=lists[old_size-1];
	int size=(old_size+1)/2;
	//delete the first old_size elements
	lists.erase(lists.begin()+size,lists.end());
}
return lists[0];	
    }
};

