/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    vector<vector<int> > result;
	if(root ==NULL){
		return result;
	}
            if(root->left==NULL && root->right==NULL){
	if(root->val == sum){
		vector<int> path;
		path.push_back(root->val);
		result.push_back(path);
	}
	return result;
	}
        if(root->left!=NULL){
    vector<vector<int> > tmp = pathSum(root->left,sum-root->val);
    if(tmp.size()>0){
	for(int i=0;i<tmp.size();i++){
		vector<int> path = tmp.at(i);
		path.insert(path.begin(),root->val);
		result.push_back(path);
	}
    }
       }
        if(root->right!=NULL){
 vector<vector<int> > tmp = pathSum(root->right,sum-root->val);
if(tmp.size()>0){
	for(int i=0;i<tmp.size();i++){
		vector<int> path = tmp.at(i);
		path.insert(path.begin(),root->val);
		result.push_back(path);
	}
}//if
    }//if
	return result;
    }
};

