/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        if(head==NULL)
            return NULL;
        RandomListNode* tmp=head;
        //make a copy
        while(tmp!=NULL){
            RandomListNode* next=tmp->next;
            RandomListNode* copy=new RandomListNode(tmp->label);
            tmp->next=copy;
            copy->next=next;
            tmp=next;
        }
     
        //create random connection
        tmp=head;
        while(tmp!=NULL){
            tmp->next->random=tmp->random==NULL ? NULL : tmp->random->next;
            tmp=tmp->next->next;
        }
        //divide the two lists;
        tmp=head;
        RandomListNode* result=tmp->next;
        RandomListNode* tmp2=result;
        while(tmp!=NULL){
            tmp->next=tmp2->next;
            tmp=tmp->next;
            if(tmp!=NULL){
                tmp2->next=tmp->next;
                tmp2=tmp2->next;
            }
        }
        return result;
    }
};
