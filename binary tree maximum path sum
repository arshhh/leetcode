/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
//get the maximum path in this tree and the maximum path that ends at root
//path can't be empty while sps can be empty
 void getPathInfo(TreeNode *node,int& sps,int& ps){
     int val = node->val;
     //sps1 is the maximum path ends at root of left tree it can be empty
     //ps1 is the maximum path of left tree
     int sps1=0;
     int sps2=0;
     int ps1;
     int ps2;
     if(node->left == NULL && node->right==NULL){
         sps = val>0 ? val : 0;
         ps  = val;    
         return;
     }
    sps = 0;
    ps  = val;
	if(node->left != NULL){
		getPathInfo(node->left,sps1,ps1);
		sps = max(sps,sps1+val);
		ps  = max(max(ps,ps1),sps1+val);
	}

	if(node->right!=NULL){
		getPathInfo(node->right,sps2,ps2);
		sps = max(sps,sps2+val);
		ps = max( max(ps,ps2),sps2+val );
	}
    
    if(node->left !=NULL && node->right!=NULL){
        ps = max(ps,sps1+val+sps2);
    }

}
    int maxPathSum(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
	if(root==NULL)
		return 0;
	int sps=0;
	int ps;
	getPathInfo(root,sps,ps);
	return ps;
};

