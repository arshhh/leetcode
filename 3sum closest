/* this is similar to narrow down the search range. but it needs sort first*/

class Solution {
public:
    int threeSumClosest(vector<int> &num, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    int n=num.size();
    //sort
    sort(num.begin(),num.end());
	int closest_sum=num[0]+num[1]+num[2];
	//three sum starting with num[i]
	for(int i=0;i<n-2;i++){
		int sum=num[i]+num[i+1]+num[n-1];
		for(int j=i+1,k=n-1;j<k;){
			int tmp_sum=num[i]+num[j]+num[k];
            if(abs(tmp_sum-target)>abs(sum-target)){
				closest_sum = abs(closest_sum-target) < abs(sum-target) ?
					closest_sum : sum;
				break;
			}
            //sum is better than tmp_sum
            sum=tmp_sum;           
            if(k==j+1){
                closest_sum = abs(closest_sum-target) < abs(sum-target) ?
					closest_sum : sum;
            }
		
		
			if(tmp_sum==target)
				return tmp_sum;
			else if(tmp_sum>target){
				k--;
			}else{
				j++;
			}
		}
	//ignore the duplicates
	while(num[i]==num[i+1])
		i++;
	}//for
	return closest_sum;
    }
};

