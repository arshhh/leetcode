class Solution {
public:
    vector<vector<int> > subsets(vector<int> &S) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
vector<vector<int> > res;
vector<int> set;
res.push_back(set);
int n=S.size();
if(n==0)
return res;
sort(S.begin(),S.end());
queue<vector<int> > set_queue;
queue<int> index_queue;
//process len=1
for(int i=0;i<n;i++){
    vector<int> new_set;
	new_set.push_back(S[i]);
	res.push_back(new_set);
	set_queue.push(new_set);
    index_queue.push(i);
}
for(int len=2;len<=n;len++){
	int size=set_queue.size();
	for(int i=0;i<size;i++){
		vector<int> old_set=set_queue.front();
        int index = index_queue.front();
		
		for(int j=index+1;j<n;j++){
			vector<int> new_set(old_set);
			new_set.push_back(S[j]);
			res.push_back(new_set);
			set_queue.push(new_set);
            index_queue.push(j);
		}
		set_queue.pop();
        index_queue.pop();
	}
} 
return res;       
    }
};

