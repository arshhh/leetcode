/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> map;
        return helper(node, map);
    }
    UndirectedGraphNode* helper(UndirectedGraphNode* node, unordered_map<UndirectedGraphNode*, UndirectedGraphNode*>& map) {
        if(node==nullptr)
            return nullptr;
        if(map.find(node) == map.end()) {
            UndirectedGraphNode *new_node = new UndirectedGraphNode(node->label);
            map[node] = new_node;
        } else {
            // If a node is in the map, that means it's already been cloned.
            return map[node];
        }
        UndirectedGraphNode *new_node = map[node];
        for(const auto& neighbor: node->neighbors) {
            UndirectedGraphNode *new_neighbor = helper(neighbor, map);
            new_node->neighbors.push_back(new_neighbor);
        }
        return new_node;
    }
};
