/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
 typedef unordered_map<UndirectedGraphNode*,UndirectedGraphNode*> Map;
 
class Solution {
public:
    //node is the original node and it has already push into map
    void dfs(UndirectedGraphNode *node,Map& map){
        UndirectedGraphNode* node_copy=map[node];
        vector<UndirectedGraphNode*> neighbors=node->neighbors;
        for(int i=0;i<neighbors.size();i++){
            if(map.find(neighbors[i])==map.end()){
                UndirectedGraphNode* copy=new UndirectedGraphNode(neighbors[i]->label);
                node_copy->neighbors.push_back(copy);
                map[neighbors[i]]=copy; 
                dfs(neighbors[i],map);
            }else{
                node_copy->neighbors.push_back(map[neighbors[i]]);
            }
        }
    }
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        //ids map label to vector index
        if(node==NULL)
            return NULL;
        Map map;
        UndirectedGraphNode* node_copy=new UndirectedGraphNode(node->label);
        map[node]=node_copy;
        dfs(node,map);
        return node_copy;
    }
};
